# ============================================================================
# docker-compose.test.yml
#
# This file defines the services needed to run the application's test suite
# in an isolated Docker environment. It includes the test runner service,
# an in-memory MongoDB instance, and an in-memory Redis instance.
#
# To run all tests:
#   docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
#
# ============================================================================

services:
  # --------------------------------------------------------------------------
  # Test API Server
  #
  # This service builds the application in a development stage (to include
  # devDependencies) and runs the full CI test suite.
  # --------------------------------------------------------------------------
  app-test:
    build:
      context: .
      target: dev # Use the 'dev' stage from Dockerfile to include devDependencies
      dockerfile: Dockerfile
    container_name: cybercore-api-test
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo-test:27017/cybercore_test
      - REDIS_URL=redis://redis-test:6379
      - JWT_SECRET=test_secret_key_for_testing_only
      - JWT_REFRESH_SECRET=test_refresh_secret_key_for_testing
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      mongo-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - cybercore-test-network
    # The command to execute the full test suite
    command: npm run test:ci

  # --------------------------------------------------------------------------
  # Test MongoDB
  #
  # An isolated MongoDB instance for testing. It uses tmpfs to run in-memory
  # for maximum performance and to ensure no data persists between test runs.
  # --------------------------------------------------------------------------
  mongo-test:
    image: mongo:7.0
    container_name: cybercore-mongo-test
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=cybercore_test
    # Use tmpfs for in-memory storage, which is faster for tests
    tmpfs:
      - /data/db
    networks:
      - cybercore-test-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 5s
      timeout: 3s
      retries: 10

  # --------------------------------------------------------------------------
  # Test Redis
  #
  # An isolated Redis instance for testing, also using tmpfs for performance.
  # --------------------------------------------------------------------------
  redis-test:
    image: redis:7.2-alpine
    container_name: cybercore-redis-test
    command: redis-server --appendonly no
    # Use tmpfs for in-memory storage
    tmpfs:
      - /data
    networks:
      - cybercore-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

networks:
  cybercore-test-network:
    driver: bridge
