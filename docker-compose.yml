services:
  # Application service for production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: cybercore-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/cybercore
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_change_in_production}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your_refresh_secret_change_in_production}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - cybercore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production

  # Development service
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: cybercore-api-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/cybercore_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development_secret_key_change_in_production
      - JWT_REFRESH_SECRET=development_refresh_secret_change_in_production
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - cybercore-network
    profiles:
      - dev

  # MongoDB service
  mongodb:
    image: mongo:7.0
    container_name: cybercore-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-admin123}
      - MONGO_INITDB_DATABASE=cybercore
    volumes:
      - mongodb_data:/data/db
    networks:
      - cybercore-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis service
  redis:
    image: redis:7.2-alpine
    container_name: cybercore-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - cybercore-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # MongoDB Admin UI (for development)
  mongo-express:
    image: mongo-express:latest
    container_name: cybercore-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD:-admin123}
      - ME_CONFIG_MONGODB_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb
    networks:
      - cybercore-network
    profiles:
      - dev

  # Redis Admin UI (for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cybercore-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-redis123}
    depends_on:
      - redis
    networks:
      - cybercore-network
    profiles:
      - dev

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  cybercore-network:
    driver: bridge