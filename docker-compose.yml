# docker-compose.dev.yml
version: '3.8'

services:
  # Development API Server
  app:
    build:
      context: .
      target: dev
      dockerfile: Dockerfile
    container_name: cybercore-api-dev
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongo:27017/cybercore_dev
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.development
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      - mongo
      - redis
    networks:
      - cybercore-network
    restart: unless-stopped
    command: npm run start:dev

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: cybercore-mongo-dev
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=cybercore_dev
    volumes:
      - mongo_data_dev:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - cybercore-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: cybercore-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data_dev:/data
    networks:
      - cybercore-network
    restart: unless-stopped

  # MongoDB Admin Interface
  mongo-express:
    image: mongo-express:1.0.0
    container_name: cybercore-mongo-express-dev
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin123@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongo
    networks:
      - cybercore-network
    restart: unless-stopped

  # Redis Admin Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cybercore-redis-commander-dev
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
    depends_on:
      - redis
    networks:
      - cybercore-network
    restart: unless-stopped

volumes:
  mongo_data_dev:
  redis_data_dev:

networks:
  cybercore-network:
    driver: bridge

---
# docker-compose.prod.yml
version: '3.8'

services:
  # Production API Server (Multiple Instances)
  app:
    build:
      context: .
      target: runner
      dockerfile: Dockerfile
    image: cybercore-api:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/cybercore_prod
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.production
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      - mongo
      - redis
    networks:
      - cybercore-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: cybercore-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - cybercore-network
    restart: unless-stopped

  # MongoDB Replica Set
  mongo:
    image: mongo:7.0
    container_name: cybercore-mongo-prod
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=cybercore_prod
    volumes:
      - mongo_data_prod:/data/db
      - mongo_config_prod:/data/configdb
    networks:
      - cybercore-network
    restart: unless-stopped

  # Redis Cluster
  redis:
    image: redis:7.2-alpine
    container_name: cybercore-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - cybercore-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cybercore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cybercore-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cybercore-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - cybercore-network
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: cybercore-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - cybercore-network
    restart: unless-stopped

volumes:
  mongo_data_prod:
  mongo_config_prod:
  redis_data_prod:
  uploads_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  cybercore-network:
    driver: overlay
    attachable: true

---
# docker-compose.test.yml
version: '3.8'

services:
  # Test API Server
  app-test:
    build:
      context: .
      target: dev
      dockerfile: Dockerfile
    container_name: cybercore-api-test
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongo-test:27017/cybercore_test
      - REDIS_URL=redis://redis-test:6379
      - JWT_SECRET=test_secret_key_for_testing_only
      - JWT_REFRESH_SECRET=test_refresh_secret_key_for_testing
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - mongo-test
      - redis-test
    networks:
      - cybercore-test-network
    command: npm run test:ci

  # Test MongoDB
  mongo-test:
    image: mongo:7.0
    container_name: cybercore-mongo-test
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=cybercore_test
    tmpfs:
      - /data/db
    networks:
      - cybercore-test-network

  # Test Redis
  redis-test:
    image: redis:7.2-alpine
    container_name: cybercore-redis-test
    command: redis-server --appendonly yes
    tmpfs:
      - /data
    networks:
      - cybercore-test-network

networks:
  cybercore-test-network:
    driver: bridge