import express from 'express';import cors from 'cors';import helmet from 'helmet';import { config } from '@/config/env';import { logger } from '@/core/infra/logger';import { connectDB } from '@/core/infra/database';import { errorHandler } from '@/core/middlewares/errorHandler';import { requestLogger } from '@/core/middlewares/requestLogger';import { authRoutes } from '@/api/auth/routes';import { userRoutes } from '@/api/users/routes';import {tenantRoutes} from "@/api/tenants/routes";import {dbRoutes} from "@/api/debugDB/routes";import {runSeed} from "@/core/infra/scripts/seed";import {CacheService} from "@/core/services/CacheService";const app= express();//security & CORSapp.use(helmet());app.use(cors());//Body Parsingapp.use(express.json({limit: '10mb'}));app.use(express.urlencoded({extended: true}));//Req Loggingapp.use(requestLogger);//Health Checkapp.get('/health',(req,res)=>{    res.json({ status:'OK', timestamp: new Date().toISOString()});});//API routesapp.use('/api/v1/auth', authRoutes);app.use('/api/v1/users', userRoutes);app.use('/api/v1/tenants', tenantRoutes);app.use('/api/v1/debug', dbRoutes);//error handlingapp.use(errorHandler);//404  handlerapp.use('*', (req, res)=>{res.status(404).json({error:'Route not found'});});async function bootstrap(){try {    await connectDB();    // Initialize cache service (includes Redis)    await CacheService.initialize();    // Optional: Disable seeding in production    if (config.NODE_ENV !== 'production') {        await runSeed();    }    const port = config.PORT || 3000;    app.listen(port, () => {        logger.info(`ðŸš€ Server running on port ${port}`);        logger.info(`ðŸ“Š Environment: ${config.NODE_ENV}`);        logger.info(`ðŸ”´ Redis: ${config.REDIS_URL}`);    });} catch (error) {    logger.error('Failed to start Server:', error);    process.exit(1);}}// Graceful shutdownprocess.on('SIGTERM', async () => {    logger.info('SIGTERM received, shutting down gracefully');    await CacheService.cleanup();    process.exit(0);});process.on('SIGINT', async () => {    logger.info('SIGINT received, shutting down gracefully');    await CacheService.cleanup();    process.exit(0);});bootstrap();